apply plugin: 'com.android.library'

android{
    def gConf = rootProject.extensions.getByName("ext")

    compileSdkVersion gConf.getAt("compile")
    buildToolsVersion gConf.getAt("build")

    defaultConfig {

        ndk {
            moduleName "libnative"
            ldLibs "log"
            cFlags "-DANDROID_NDK_HOME"
        }
    }

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions{
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions{
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
        disable 'OldTargetApi'
    }

    buildTypes{

        debug {
            debuggable true
            jniDebuggable true
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        foss {
            debuggable false
            jniDebuggable false
        }
    }

    //native

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        jni.srcDirs = ['jni']
    }

    sourceSets.debug {

    }

    sourceSets.release {

    }

    sourceSets.foss {

    }

    productFlavors {
        x86 {
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
        }
        fat
    }
}

dependencies{

}